/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ICourseInterface extends ethers.utils.Interface {
  functions: {
    "getCourseCID()": FunctionFragment;
    "graduate(bytes32,string)": FunctionFragment;
    "isCertified(bytes32[],bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCourseCID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "graduate",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCertified",
    values: [BytesLike[], BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCourseCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "graduate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCertified",
    data: BytesLike
  ): Result;

  events: {
    "Graduate(bytes32,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Graduate"): EventFragment;
}

export class ICourse extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ICourseInterface;

  functions: {
    getCourseCID(overrides?: Overrides): Promise<ContractTransaction>;

    "getCourseCID()"(overrides?: Overrides): Promise<ContractTransaction>;

    graduate(
      _hash: BytesLike,
      cid: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "graduate(bytes32,string)"(
      _hash: BytesLike,
      cid: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isCertified(
      proof: BytesLike[],
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isCertified(bytes32[],bytes32)"(
      proof: BytesLike[],
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  getCourseCID(overrides?: Overrides): Promise<ContractTransaction>;

  "getCourseCID()"(overrides?: Overrides): Promise<ContractTransaction>;

  graduate(
    _hash: BytesLike,
    cid: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "graduate(bytes32,string)"(
    _hash: BytesLike,
    cid: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isCertified(
    proof: BytesLike[],
    root: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isCertified(bytes32[],bytes32)"(
    proof: BytesLike[],
    root: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getCourseCID(overrides?: CallOverrides): Promise<string>;

    "getCourseCID()"(overrides?: CallOverrides): Promise<string>;

    graduate(
      _hash: BytesLike,
      cid: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "graduate(bytes32,string)"(
      _hash: BytesLike,
      cid: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isCertified(
      proof: BytesLike[],
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isCertified(bytes32[],bytes32)"(
      proof: BytesLike[],
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Graduate(merkelProof: null, courseCID: null): EventFilter;
  };

  estimateGas: {
    getCourseCID(overrides?: Overrides): Promise<BigNumber>;

    "getCourseCID()"(overrides?: Overrides): Promise<BigNumber>;

    graduate(
      _hash: BytesLike,
      cid: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "graduate(bytes32,string)"(
      _hash: BytesLike,
      cid: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isCertified(
      proof: BytesLike[],
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isCertified(bytes32[],bytes32)"(
      proof: BytesLike[],
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCourseCID(overrides?: Overrides): Promise<PopulatedTransaction>;

    "getCourseCID()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    graduate(
      _hash: BytesLike,
      cid: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "graduate(bytes32,string)"(
      _hash: BytesLike,
      cid: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isCertified(
      proof: BytesLike[],
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isCertified(bytes32[],bytes32)"(
      proof: BytesLike[],
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
