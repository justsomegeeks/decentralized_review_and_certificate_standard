/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ReviewInterface extends ethers.utils.Interface {
  functions: {
    "addBootcamp(address,string)": FunctionFragment;
    "addCourse(address,address)": FunctionFragment;
    "bootcamps(address,uint256)": FunctionFragment;
    "courseCount()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reviewCourse(address,string,uint256,bytes32[],bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBootcamp",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addCourse",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bootcamps",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "courseCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewCourse",
    values: [string, string, BigNumberish, BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBootcamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addCourse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bootcamps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "courseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "NewCourse(address,address)": EventFragment;
    "NewReview(uint256,address,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewCourse"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReview"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Review extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ReviewInterface;

  functions: {
    addBootcamp(
      bootcamp: string,
      bootcampURI: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addBootcamp(address,string)"(
      bootcamp: string,
      bootcampURI: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addCourse(address,address)"(
      courseAddress: string,
      bootcamp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addCourse(address,string)"(
      course: string,
      courseURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    bootcamps(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "bootcamps(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    courseCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "courseCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    "reviewCourse(address,string,uint256,bytes32[],bytes32)"(
      courseAddress: string,
      reviewURI: string,
      rating: BigNumberish,
      proof: BytesLike[],
      root: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reviewCourse(uint256,string,uint256,bytes32[],bytes32)"(
      courseId: BigNumberish,
      reviewURI: string,
      rating: BigNumberish,
      proof: BytesLike[],
      root: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addBootcamp(
    bootcamp: string,
    bootcampURI: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addBootcamp(address,string)"(
    bootcamp: string,
    bootcampURI: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addCourse(address,address)"(
    courseAddress: string,
    bootcamp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addCourse(address,string)"(
    course: string,
    courseURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  bootcamps(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "bootcamps(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  courseCount(overrides?: CallOverrides): Promise<BigNumber>;

  "courseCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  "reviewCourse(address,string,uint256,bytes32[],bytes32)"(
    courseAddress: string,
    reviewURI: string,
    rating: BigNumberish,
    proof: BytesLike[],
    root: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reviewCourse(uint256,string,uint256,bytes32[],bytes32)"(
    courseId: BigNumberish,
    reviewURI: string,
    rating: BigNumberish,
    proof: BytesLike[],
    root: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addBootcamp(
      bootcamp: string,
      bootcampURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addBootcamp(address,string)"(
      bootcamp: string,
      bootcampURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addCourse(address,address)"(
      courseAddress: string,
      bootcamp: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addCourse(address,string)"(
      course: string,
      courseURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    bootcamps(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "bootcamps(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    courseCount(overrides?: CallOverrides): Promise<BigNumber>;

    "courseCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    "reviewCourse(address,string,uint256,bytes32[],bytes32)"(
      courseAddress: string,
      reviewURI: string,
      rating: BigNumberish,
      proof: BytesLike[],
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "reviewCourse(uint256,string,uint256,bytes32[],bytes32)"(
      courseId: BigNumberish,
      reviewURI: string,
      rating: BigNumberish,
      proof: BytesLike[],
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NewCourse(bootcamp: string | null, courseAddress: null): EventFilter;

    NewReview(
      courseId: null,
      reviewer: string | null,
      reviewUID: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    addBootcamp(
      bootcamp: string,
      bootcampURI: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addBootcamp(address,string)"(
      bootcamp: string,
      bootcampURI: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addCourse(address,address)"(
      courseAddress: string,
      bootcamp: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addCourse(address,string)"(
      course: string,
      courseURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    bootcamps(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bootcamps(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    courseCount(overrides?: CallOverrides): Promise<BigNumber>;

    "courseCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    "reviewCourse(address,string,uint256,bytes32[],bytes32)"(
      courseAddress: string,
      reviewURI: string,
      rating: BigNumberish,
      proof: BytesLike[],
      root: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "reviewCourse(uint256,string,uint256,bytes32[],bytes32)"(
      courseId: BigNumberish,
      reviewURI: string,
      rating: BigNumberish,
      proof: BytesLike[],
      root: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBootcamp(
      bootcamp: string,
      bootcampURI: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addBootcamp(address,string)"(
      bootcamp: string,
      bootcampURI: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addCourse(address,address)"(
      courseAddress: string,
      bootcamp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addCourse(address,string)"(
      course: string,
      courseURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    bootcamps(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bootcamps(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    courseCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "courseCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    "reviewCourse(address,string,uint256,bytes32[],bytes32)"(
      courseAddress: string,
      reviewURI: string,
      rating: BigNumberish,
      proof: BytesLike[],
      root: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reviewCourse(uint256,string,uint256,bytes32[],bytes32)"(
      courseId: BigNumberish,
      reviewURI: string,
      rating: BigNumberish,
      proof: BytesLike[],
      root: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
